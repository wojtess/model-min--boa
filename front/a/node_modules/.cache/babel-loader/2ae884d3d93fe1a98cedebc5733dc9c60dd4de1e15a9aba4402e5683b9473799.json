{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useContext } from \"react\";\nimport { DataContext } from \"./DataContext\";\nconst DataSender = () => {\n  _s();\n  const {\n    dataToSend\n  } = useContext(DataContext);\n  const intervalRef = useRef(null);\n  const dataRef = useRef(dataToSend);\n\n  // Update the reference whenever the data changes\n  useEffect(() => {\n    dataRef.current = dataToSend;\n  }, [dataToSend]);\n  useEffect(() => {\n    // Function to send data\n    const sendData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataRef.current) // Use the latest data\n        });\n        if (!response.ok) {\n          console.error(\"Error sending data:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Network error:\", error);\n      }\n    };\n\n    // Start the interval\n    intervalRef.current = setInterval(() => {\n      sendData();\n    }, 100);\n\n    // Cleanup function\n    return () => clearInterval(intervalRef.current);\n  }, []); // Empty dependency ensures this runs only once\n};\n_s(DataSender, \"mPs9mSjIRAzSSO1TiCT6+D3SMQw=\");\n_c = DataSender;\nexport default DataSender;\nvar _c;\n$RefreshReg$(_c, \"DataSender\");","map":{"version":3,"names":["useEffect","useRef","useContext","DataContext","DataSender","_s","dataToSend","intervalRef","dataRef","current","sendData","response","fetch","method","headers","body","JSON","stringify","ok","console","error","statusText","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/home/jedrek/Powertrain/miniboat-website/src/DataSender.js"],"sourcesContent":["import { useEffect, useRef, useContext } from \"react\";\nimport { DataContext } from \"./DataContext\";\n\nconst DataSender = () => {\n  const { dataToSend } = useContext(DataContext);\n  const intervalRef = useRef(null);\n  const dataRef = useRef(dataToSend);\n\n  // Update the reference whenever the data changes\n  useEffect(() => {\n    dataRef.current = dataToSend;\n  }, [dataToSend]);\n\n  useEffect(() => {\n    // Function to send data\n    const sendData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(dataRef.current), // Use the latest data\n        });\n        if (!response.ok) {\n          console.error(\"Error sending data:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Network error:\", error);\n      }\n    };\n\n    // Start the interval\n    intervalRef.current = setInterval(() => {\n      sendData();\n    }, 100);\n\n    // Cleanup function\n    return () => clearInterval(intervalRef.current);\n  }, []); // Empty dependency ensures this runs only once\n};\n\nexport default DataSender;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAQ,OAAO;AACrD,SAASC,WAAW,QAAQ,eAAe;AAE3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAW,CAAC,GAAGJ,UAAU,CAACC,WAAW,CAAC;EAC9C,MAAMI,WAAW,GAAGN,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMO,OAAO,GAAGP,MAAM,CAACK,UAAU,CAAC;;EAElC;EACAN,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,OAAO,GAAGH,UAAU;EAC9B,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhBN,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,OAAO,CAACC,OAAO,CAAC,CAAE;QACzC,CAAC,CAAC;QACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;UAChBC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAET,QAAQ,CAACU,UAAU,CAAC;QAC3D;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACxC;IACF,CAAC;;IAED;IACAb,WAAW,CAACE,OAAO,GAAGa,WAAW,CAAC,MAAM;MACtCZ,QAAQ,CAAC,CAAC;IACZ,CAAC,EAAE,GAAG,CAAC;;IAEP;IACA,OAAO,MAAMa,aAAa,CAAChB,WAAW,CAACE,OAAO,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACV,CAAC;AAACJ,EAAA,CArCID,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}