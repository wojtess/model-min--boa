{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport SpeedometerContext from './context';\nexport default function Speedometer(_ref) {\n  let {\n    width = 250,\n    height = width,\n    angle = 250,\n    rotation = -angle / 2,\n    value = 0,\n    min = 0,\n    max = 180,\n    lineCap = 'butt',\n    accentColor = '#00e0ff',\n    fontFamily = 'helvetica',\n    children\n  } = _ref;\n  const radius = width / 2;\n  const currentFillAngle = useMemo(() => {\n    const clampValue = Math.min(max, Math.max(min, Number(value)));\n    return angle * (clampValue - min) / (max - min);\n  }, [min, max, value, angle]);\n  const contextValue = {\n    currentFillAngle,\n    radius,\n    rotation,\n    min,\n    max,\n    angle,\n    lineCap,\n    accentColor,\n    fontFamily,\n    value\n  };\n  return _jsx(SpeedometerContext.Provider, {\n    value: contextValue,\n    children: _jsx(\"svg\", {\n      width: width,\n      height: height,\n      children: _jsx(\"g\", {\n        transform: `rotate(${rotation} ${radius} ${radius})`,\n        children: children\n      })\n    })\n  });\n}","map":{"version":3,"names":["jsx","_jsx","useMemo","SpeedometerContext","Speedometer","_ref","width","height","angle","rotation","value","min","max","lineCap","accentColor","fontFamily","children","radius","currentFillAngle","clampValue","Math","Number","contextValue","Provider","transform"],"sources":["/home/wojtess/Documents/programing/esp32/powertrain/model2/front/a/node_modules/react-speedometer/dist/Speedometer.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport SpeedometerContext from './context';\nexport default function Speedometer({ width = 250, height = width, angle = 250, rotation = -angle / 2, value = 0, min = 0, max = 180, lineCap = 'butt', accentColor = '#00e0ff', fontFamily = 'helvetica', children, }) {\n    const radius = width / 2;\n    const currentFillAngle = useMemo(() => {\n        const clampValue = Math.min(max, Math.max(min, Number(value)));\n        return (angle * (clampValue - min)) / (max - min);\n    }, [min, max, value, angle]);\n    const contextValue = {\n        currentFillAngle,\n        radius,\n        rotation,\n        min,\n        max,\n        angle,\n        lineCap,\n        accentColor,\n        fontFamily,\n        value,\n    };\n    return (_jsx(SpeedometerContext.Provider, { value: contextValue, children: _jsx(\"svg\", { width: width, height: height, children: _jsx(\"g\", { transform: `rotate(${rotation} ${radius} ${radius})`, children: children }) }) }));\n}\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,kBAAkB,MAAM,WAAW;AAC1C,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAAqL;EAAA,IAApL;IAAEC,KAAK,GAAG,GAAG;IAAEC,MAAM,GAAGD,KAAK;IAAEE,KAAK,GAAG,GAAG;IAAEC,QAAQ,GAAG,CAACD,KAAK,GAAG,CAAC;IAAEE,KAAK,GAAG,CAAC;IAAEC,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAG,GAAG;IAAEC,OAAO,GAAG,MAAM;IAAEC,WAAW,GAAG,SAAS;IAAEC,UAAU,GAAG,WAAW;IAAEC;EAAU,CAAC,GAAAX,IAAA;EAClN,MAAMY,MAAM,GAAGX,KAAK,GAAG,CAAC;EACxB,MAAMY,gBAAgB,GAAGhB,OAAO,CAAC,MAAM;IACnC,MAAMiB,UAAU,GAAGC,IAAI,CAACT,GAAG,CAACC,GAAG,EAAEQ,IAAI,CAACR,GAAG,CAACD,GAAG,EAAEU,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC;IAC9D,OAAQF,KAAK,IAAIW,UAAU,GAAGR,GAAG,CAAC,IAAKC,GAAG,GAAGD,GAAG,CAAC;EACrD,CAAC,EAAE,CAACA,GAAG,EAAEC,GAAG,EAAEF,KAAK,EAAEF,KAAK,CAAC,CAAC;EAC5B,MAAMc,YAAY,GAAG;IACjBJ,gBAAgB;IAChBD,MAAM;IACNR,QAAQ;IACRE,GAAG;IACHC,GAAG;IACHJ,KAAK;IACLK,OAAO;IACPC,WAAW;IACXC,UAAU;IACVL;EACJ,CAAC;EACD,OAAQT,IAAI,CAACE,kBAAkB,CAACoB,QAAQ,EAAE;IAAEb,KAAK,EAAEY,YAAY;IAAEN,QAAQ,EAAEf,IAAI,CAAC,KAAK,EAAE;MAAEK,KAAK,EAAEA,KAAK;MAAEC,MAAM,EAAEA,MAAM;MAAES,QAAQ,EAAEf,IAAI,CAAC,GAAG,EAAE;QAAEuB,SAAS,EAAE,UAAUf,QAAQ,IAAIQ,MAAM,IAAIA,MAAM,GAAG;QAAED,QAAQ,EAAEA;MAAS,CAAC;IAAE,CAAC;EAAE,CAAC,CAAC;AAClO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}